<?xml version="1.0" encoding="utf-8"?><helpItems schema="maml">
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<!--Generated by PS Cmdlet Help Editor-->
	<command:details>
		<command:name>Get-Snippet</command:name>
		<maml:description>
			<maml:para>Gets the snippets that are available on the local computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para />
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Snippet</command:noun>
		<dev:version />
	</command:details>
	<maml:description>
		<maml:para>The Get-Snippet cmdlet gets the snippets that are available on the local computer.</maml:para>
		<maml:para>By default, Get-Snippet returns all snippets that are available on the local computer. To return a filtered list of snippets, you can use the Name parameter to specify the name of the snippets you want to see.</maml:para>
	</maml:description>
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Snippet</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="0">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The name of the snippet.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">String[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>ModuleName</maml:name>
				<maml:description>
					<maml:para>The name of the module where the snippet is located.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoHelp</maml:name>
				<maml:description>
					<maml:para>Skips the lookup of Snippet help information when the snippet is retrieved. Use this parameter when you are retrieving a snippet that you need to invoke many times and you want to cache the object for faster performance during invocation of the snippet.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>InformationAction</maml:name>
				<maml:description>
					<maml:para />
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>InformationVariable</maml:name>
				<maml:description>
					<maml:para />
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="0">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The name of the snippet.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="true">String[]</command:parameterValue>
			<dev:type>
				<maml:name>String[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>ModuleName</maml:name>
			<maml:description>
				<maml:para>The name of the module where the snippet is located.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoHelp</maml:name>
			<maml:description>
				<maml:para>Skips the lookup of Snippet help information when the snippet is retrieved. Use this parameter when you are retrieving a snippet that you need to invoke many times and you want to cache the object for faster performance during invocation of the snippet.</maml:para>
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>InformationAction</maml:name>
			<maml:description>
				<maml:para />
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
			<dev:type>
				<maml:name>ActionPreference</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>InformationVariable</maml:name>
			<maml:description>
				<maml:para />
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri></maml:uri>
				<maml:description/>
			</dev:type>
			<maml:description>
<maml:para />
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>SnippetPx.Snippet</maml:name>
				<maml:uri></maml:uri>
				<maml:description/>
			</dev:type>
			<maml:description>
<maml:para />
			</maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors></command:terminatingErrors>
	<command:nonTerminatingErrors></command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>When retrieving snippets, it is best to provide a module name in the ModuleName parameter whenever possible. This will result in the fastest possible performance. You can further improve performance by using the NoHelp switch parameter to skip the lookup of the snippet help information.</maml:para>
			<maml:para>When you use wildcards in the Name or ModuleName parameters, when no ModuleName parameter is provided, or when no parameters are provided, the Get-Snippet command looks for matching snippets in the following folders in the order in which they are listed:</maml:para>
			<maml:para>- the current user snippets folder (Documents\WindowsPowerShell\snippets);</maml:para>
			<maml:para>- the all users snippets folder (Program Files\WindowsPowerShell\snippets);</maml:para>
			<maml:para>- the snippets folder in the module that is currently loading (if a module is loading);</maml:para>
			<maml:para>- the snippets folder in the module where the cmdlet was invoked (if it was invoked from a module);</maml:para>
			<maml:para>- the snippets folder in the SnippetPx module (SnippetPx\snippets);</maml:para>
			<maml:para>- the snippets folder in all other loaded modules;</maml:para>
			<maml:para>- the snippets folder in all unloaded modules, in the order in which they are discovered according to the PSModulePath environment variable;</maml:para>
			<maml:para>To guarantee uniqueness of snippets across modules, snippets specific to a module should use a snippet name prefixed with the module name. For example, a snippet to provision AD users in an ActiveDirectory module could use the filename ActiveDirectory.User.Provision.ps1.</maml:para>
			<maml:para>Using spaces in snippet filenames is supported, but discouraged.</maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>--------------------------  Example 1  --------------------------</maml:title>
			<maml:introduction>
				<maml:paragraph>PS C:\&gt;</maml:paragraph>
			</maml:introduction>
			<dev:code>PS C:\&gt; Get-Snippet</dev:code>
			<dev:remarks>
				<maml:para>This command gets all snippets that are available on the local system, and outputs them in the order in which they are discovered.</maml:para>
				<maml:para />
				<maml:para />
				<maml:para></maml:para>
			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
						<maml:para />
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>--------------------------  Example 2  --------------------------</maml:title>
			<maml:introduction>
				<maml:paragraph>PS C:\&gt;</maml:paragraph>
			</maml:introduction>
			<dev:code>PS C:\&gt; Get-Snippet -Name Module.Initialize -ModuleName SnippetPx</dev:code>
			<dev:remarks>
				<maml:para>This command gets the Module.Initialize snippet from the SnippetPx module.</maml:para>
				<maml:para />
				<maml:para />
				<maml:para></maml:para>
			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
						<maml:para />
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>--------------------------  Example 3  --------------------------</maml:title>
			<maml:introduction>
				<maml:paragraph>PS C:\&gt;</maml:paragraph>
			</maml:introduction>
			<dev:code>PS C:\&gt; Get-Snippet -Name ProxyFunction*</dev:code>
			<dev:remarks>
				<maml:para>This command gets all snippets on the local system whose name starts with &quot;ProxyFunction&quot;.</maml:para>
				<maml:para />
				<maml:para />
				<maml:para></maml:para>
			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
						<maml:para />
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>--------------------------  Example 4  --------------------------</maml:title>
			<maml:introduction>
				<maml:paragraph>PS C:\&gt;</maml:paragraph>
			</maml:introduction>
			<dev:code>PS C:\&gt; Get-Snippet -ModuleName SnippetPx</dev:code>
			<dev:remarks>
				<maml:para>This command gets all snippets that are included in the SnippetPx module.</maml:para>
				<maml:para />
				<maml:para />
				<maml:para></maml:para>
			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
						<maml:para />
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Invoke-Snippet</maml:linkText>
			<maml:uri></maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<!--Generated by PS Cmdlet Help Editor-->
	<command:details>
		<command:name>Invoke-Snippet</command:name>
		<maml:description>
			<maml:para>Invokes the specified snippet on the local computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para />
		</maml:copyright>
		<command:verb>Invoke</command:verb>
		<command:noun>Snippet</command:noun>
		<dev:version />
	</command:details>
	<maml:description>
		<maml:para>The Invoke-Snippet cmdlet invokes the specified snippet on the local computer.</maml:para>
		<maml:para>By default, Invoke-Snippet invokes the specified snippet in the current scope. Use the ChildScope parameter to invoke a snippet in a nested, child scope. To specify the parameters for the snippet, pass a hashtable into the Parameters parameter of the Invoke-Snippet cmdlet. This hashtable will be splatted into the snippet as it is invoked.</maml:para>
	</maml:description>
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Invoke-Snippet</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="0">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>The snippet you want to invoke.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Snippet</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Parameters</maml:name>
				<maml:description>
					<maml:para>A hashtable of parameters that will be splatted into the snippet as it is invoked.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ChildScope</maml:name>
				<maml:description>
					<maml:para>Invokes the snippet in a nested, child scope. By default snippets are invoked in the current scope.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>InformationAction</maml:name>
				<maml:description>
					<maml:para />
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>InformationVariable</maml:name>
				<maml:description>
					<maml:para />
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Invoke-Snippet</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="0">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>The name of the snippet to invoke.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Parameters</maml:name>
				<maml:description>
					<maml:para>A hashtable of parameters that will be splatted into the snippet as it is invoked.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Hashtable</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>ModuleName</maml:name>
				<maml:description>
					<maml:para>The name of the module where the snippet is located.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ChildScope</maml:name>
				<maml:description>
					<maml:para>Invokes the snippet in a nested, child scope. By default snippets are invoked in the current scope.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>InformationAction</maml:name>
				<maml:description>
					<maml:para />
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>InformationVariable</maml:name>
				<maml:description>
					<maml:para />
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="0">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>The name of the snippet to invoke.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Parameters</maml:name>
			<maml:description>
				<maml:para>A hashtable of parameters that will be splatted into the snippet as it is invoked.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Hashtable</command:parameterValue>
			<dev:type>
				<maml:name>Hashtable</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ChildScope</maml:name>
			<maml:description>
				<maml:para>Invokes the snippet in a nested, child scope. By default snippets are invoked in the current scope.</maml:para>
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="0">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>The snippet you want to invoke.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Snippet</command:parameterValue>
			<dev:type>
				<maml:name>Snippet</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>InformationAction</maml:name>
			<maml:description>
				<maml:para />
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
			<dev:type>
				<maml:name>ActionPreference</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>InformationVariable</maml:name>
			<maml:description>
				<maml:para />
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>ModuleName</maml:name>
			<maml:description>
				<maml:para>The name of the module where the snippet is located.</maml:para>
			</maml:description>
			<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String,SnippetPx.Snippet</maml:name>
				<maml:uri></maml:uri>
				<maml:description/>
			</dev:type>
			<maml:description>
<maml:para />
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Object</maml:name>
				<maml:uri></maml:uri>
				<maml:description/>
			</dev:type>
			<maml:description>
<maml:para />
			</maml:description>
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors></command:terminatingErrors>
	<command:nonTerminatingErrors></command:nonTerminatingErrors>
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>When invoking snippets, it is best to provide a module name in the ModuleName parameter whenever possible. This will result in the fastest possible performance.</maml:para>
			<maml:para>When no ModuleName parameter is provided, the Invoke-Snippet command looks for a matching snippet in the following folders in the order in which they are listed:</maml:para>
			<maml:para>- the current user snippets folder (Documents\WindowsPowerShell\snippets);</maml:para>
			<maml:para>- the all users snippets folder (Program Files\WindowsPowerShell\snippets);</maml:para>
			<maml:para>- the snippets folder in the module that is currently loading (if a module is loading);</maml:para>
			<maml:para>- the snippets folder in the module where the cmdlet was invoked (if it was invoked from a module);</maml:para>
			<maml:para>- the snippets folder in the SnippetPx module (SnippetPx\snippets);</maml:para>
			<maml:para>- the snippets folder in all other loaded modules;</maml:para>
			<maml:para>- the snippets folder in all unloaded modules, in the order in which they are discovered according to the PSModulePath environment variable;</maml:para>
			<maml:para>When invoking a snippet without the ModuleName parameter, if multiple snippets with the same name exist in more than one loaded module, or if multiple snippets with the same name exist in more than one unloaded module that is in the same PSModulePath parent folder, the snippet name will be considered as ambiguous and an exception will be thrown. To guarantee you invoke the right snippet, include the ModuleName parameter in your Invoke-Snippet command.</maml:para>
			<maml:para>Using spaces in snippet filenames is supported, but discouraged.</maml:para>
			<maml:para>Not all snippets are appropriate for all situations. When in doubt, consult the documentation for the snippet to ensure it is appropriate for your use case.</maml:para>
		</maml:alert>
	</maml:alertSet>
	<command:examples>
		<command:example>
			<maml:title>--------------------------  Example 1  --------------------------</maml:title>
			<maml:introduction>
				<maml:paragraph>PS C:\&gt;</maml:paragraph>
			</maml:introduction>
			<dev:code>PS C:\&gt; Invoke-Snippet -Name Module.Initialize -ModuleName SnippetPx</dev:code>
			<dev:remarks>
				<maml:para>This command invokes the Module.Initialize snippet from the SnippetPx module in the current scope. The Module.Initialize snippet will invoke several commands that are very useful and highly recommended when creating script modules.</maml:para>
				<maml:para />
				<maml:para />
				<maml:para></maml:para>
			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
						<maml:para />
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>--------------------------  Example 2  --------------------------</maml:title>
			<maml:introduction>
				<maml:paragraph>PS C:\&gt;</maml:paragraph>
			</maml:introduction>
			<dev:code>PS C:\&gt; Invoke-Snippet -Name ScriptFile.Import -Parameter @{Path=&apos;C:\FilesToImport&apos;}</dev:code>
			<dev:remarks>
				<maml:para>This command invokes the ScriptFile.Import snippet in the current scope. The ScriptFile.Import snippet will import all files with the extension .ps1 that are found in the C:\FilesToImport folder into the current PowerShell session.</maml:para>
				<maml:para />
				<maml:para />
				<maml:para></maml:para>
			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
						<maml:para />
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>--------------------------  Example 3  --------------------------</maml:title>
			<maml:introduction>
				<maml:paragraph>PS C:\&gt;</maml:paragraph>
			</maml:introduction>
			<dev:code>PS C:\&gt; $snippet - Get-Snippet -Name Module.Initialize -ModuleName SnippetPx -NoHelp
PS C:\&gt; Invoke-Snippet -InputObject $snippet</dev:code>
			<dev:remarks>
				<maml:para>This command caches the Module.Initialize snippet from the SnippetPx module, and then invokes it from the cached object in the current scope. The Module.Initialize snippet will invoke several commands that are very useful and highly recommended when creating script modules.</maml:para>
				<maml:para />
				<maml:para />
				<maml:para></maml:para>
			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText>
						<maml:para />
					</command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Snippet</maml:linkText>
			<maml:uri></maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>
</helpItems>